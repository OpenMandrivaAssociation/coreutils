diff -Naur coreutils-8.32/configure.ac coreutils-8.32.tpg/configure.ac
--- coreutils-8.32/configure.ac	2020-02-27 21:45:34.000000000 +0000
+++ coreutils-8.32.tpg/configure.ac	2020-03-14 11:50:04.933837427 +0000
@@ -334,6 +334,18 @@
   done
 fi
 
+AC_CACHE_CHECK([for gcc 7-compatible __builtin_mul_overflow_p],
+  [utils_cv_builtin_mul_overflow_p],
+  [AC_COMPILE_IFELSE(
+    [AC_LANG_PROGRAM(
+      [[]],
+      [[return __builtin_mul_overflow_p(1, 2, 3);]])],
+    [utils_cv_builtin_mul_overflow_p=yes],
+    [utils_cv_builtin_mul_overflow_p=no])])
+if test $utils_cv_builtin_mul_overflow_p = yes; then
+  AC_DEFINE([HAVE_BUILTIN_MUL_OVERFLOW_P], [1], [Define if your compiler supports __builtin_mul_overflow_p])
+fi
+
 AC_CACHE_CHECK([for 3-argument setpriority function],
   [utils_cv_func_setpriority],
   [AC_LINK_IFELSE(
diff -Naur coreutils-8.32/lib/fts.c coreutils-8.32.tpg/lib/fts.c
--- coreutils-8.32/lib/fts.c	2020-01-01 14:14:23.000000000 +0000
+++ coreutils-8.32.tpg/lib/fts.c	2020-03-14 11:52:20.788108201 +0000
@@ -200,7 +200,7 @@
 #endif
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -Naur coreutils-8.32/lib/intprops.h coreutils-8.32.tpg/lib/intprops.h
--- coreutils-8.32/lib/intprops.h	2020-01-01 14:19:22.000000000 +0000
+++ coreutils-8.32.tpg/lib/intprops.h	2020-03-14 11:51:18.088987533 +0000
@@ -238,15 +238,11 @@
 # define _GL_HAS_BUILTIN_MUL_OVERFLOW _GL_HAS_BUILTIN_ADD_OVERFLOW
 #endif
 
-/* True if __builtin_add_overflow_p (A, B, C) works, and similarly for
-   __builtin_mul_overflow_p and __builtin_mul_overflow_p.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
-
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
    (e.g., A and B) have the same type as MIN and MAX.  Instead, they assume
    that the result (e.g., A + B) has that type.  */
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define _GL_ADD_OVERFLOW(a, b, min, max)                               \
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
diff -Naur coreutils-8.32/lib/xalloc-oversized.h coreutils-8.32.tpg/lib/xalloc-oversized.h
--- coreutils-8.32/lib/xalloc-oversized.h	2020-01-01 14:14:24.000000000 +0000
+++ coreutils-8.32.tpg/lib/xalloc-oversized.h	2020-03-14 11:52:03.637075864 +0000
@@ -41,7 +41,7 @@
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
