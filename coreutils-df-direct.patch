From 6e36198f10a2f63b89c89ebb5d5c185b20fb3a63 Mon Sep 17 00:00:00 2001
From: Kamil Dudka <kdudka@redhat.com>
Date: Mon, 29 Mar 2010 17:20:34 +0000
Subject: [PATCH] coreutils-df-direct.patch

---
 doc/coreutils.texi |  7 ++++++
 src/df.c           | 36 ++++++++++++++++++++++++++++--
 tests/df/direct.sh | 55 ++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 96 insertions(+), 2 deletions(-)
 create mode 100755 tests/df/direct.sh

diff -Naur coreutils-9.4/doc/coreutils.texi coreutils-9.4.tpg/doc/coreutils.texi
--- coreutils-9.4/doc/coreutils.texi	2023-08-29 11:39:27.000000000 +0000
+++ coreutils-9.4.tpg/doc/coreutils.texi	2023-09-01 11:31:53.995889791 +0000
@@ -12341,6 +12341,13 @@
 but in general this option makes @command{df} much slower, especially when
 there are many or very busy file systems.
 
+@item --direct
+@opindex --direct
+@cindex direct statfs for a file
+Do not resolve mount point and show statistics directly for a file. It can be
+especially useful for NFS mount points if there is a boundary between two
+storage policies behind the mount point.
+
 @item --total
 @opindex --total
 @cindex grand total of file system size, usage and available space
diff -Naur coreutils-9.4/src/df.c coreutils-9.4.tpg/src/df.c
--- coreutils-9.4/src/df.c	2023-08-29 11:39:27.000000000 +0000
+++ coreutils-9.4.tpg/src/df.c	2023-09-01 11:36:57.884878333 +0000
@@ -123,6 +123,9 @@
 /* If true, print a grand total at the end.  */
 static bool print_grand_total;
 
+/* If true, show statistics for a file instead of mount point.  */
+static bool direct_statfs;
+
 /* Grand total data.  */
 static struct fs_usage grand_fsu;
 
@@ -249,13 +252,15 @@
   NO_SYNC_OPTION = CHAR_MAX + 1,
   SYNC_OPTION,
   TOTAL_OPTION,
-  OUTPUT_OPTION
+  OUTPUT_OPTION,
+  DIRECT_OPTION
 };
 
 static struct option const long_options[] =
 {
   {"all", no_argument, nullptr, 'a'},
   {"block-size", required_argument, nullptr, 'B'},
+  {"direct", no_argument, NULL, DIRECT_OPTION},
   {"inodes", no_argument, nullptr, 'i'},
   {"human-readable", no_argument, nullptr, 'h'},
   {"si", no_argument, nullptr, 'H'},
@@ -574,7 +579,10 @@
   for (col = 0; col < ncolumns; col++)
     {
       char *cell = nullptr;
-      char const *header = _(columns[col]->caption);
+      char const *header = (columns[col]->field == TARGET_FIELD
+                            && direct_statfs)?
+                            _("File") :
+                            _(columns[col]->caption);
 
       if (columns[col]->field == SIZE_FIELD
           && (header_mode == DEFAULT_MODE
@@ -1471,6 +1479,19 @@
 static void
 get_entry (char const *name, struct stat const *statp)
 {
+  if (direct_statfs)
+    {
+      char *resolved = canonicalize_file_name (name);
+      if (resolved)
+	{
+         char *mp = find_mount_point (name, statp);
+	  get_dev (NULL, mp, resolved, NULL, NULL, false, false, NULL, false);
+         free(mp);
+	  free (resolved);
+	  return;
+	}
+    }
+
   if ((S_ISBLK (statp->st_mode) || S_ISCHR (statp->st_mode))
       && get_device (name))
     return;
@@ -1541,6 +1562,7 @@
   -B, --block-size=SIZE  scale sizes by SIZE before printing them; e.g.,\n\
                            '-BM' prints sizes in units of 1,048,576 bytes;\n\
                            see SIZE format below\n\
+      --direct          show statistics for a file instead of mount point\n\
   -h, --human-readable  print sizes in powers of 1024 (e.g., 1023M)\n\
   -H, --si              print sizes in powers of 1000 (e.g., 1.1G)\n\
 "), stdout);
@@ -1631,6 +1653,9 @@
               xstrtol_fatal (e, oi, c, long_options, optarg);
           }
           break;
+        case DIRECT_OPTION:
+          direct_statfs = true;
+          break;
         case 'i':
           if (header_mode == OUTPUT_MODE)
             {
@@ -1727,6 +1752,13 @@
         }
     }
 
+  if (direct_statfs && show_local_fs)
+    {
+      error (0, 0, _("options --direct and --local (-l) are mutually "
+		     "exclusive"));
+      usage (EXIT_FAILURE);
+    }
+
   if (human_output_opts == -1)
     {
       if (posix_format)
diff -Naur coreutils-9.4/tests/df/direct.sh coreutils-9.4.tpg/tests/df/direct.sh
--- coreutils-9.4/tests/df/direct.sh	1970-01-01 00:00:00.000000000 +0000
+++ coreutils-9.4.tpg/tests/df/direct.sh	2023-09-01 11:38:34.197889627 +0000
@@ -0,0 +1,55 @@
+#!/bin/sh
+# Ensure "df --direct" works as documented
+
+# Copyright (C) 2010 Free Software Foundation, Inc.
+
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+. "${srcdir=.}/init.sh"; path_prepend_ ../src
+print_ver_ df
+
+df || skip_ "df fails"
+
+DIR=`pwd` || framework_failure
+FILE="$DIR/file"
+touch "$FILE" || framework_failure
+echo "$FILE" > file_exp || framework_failure
+echo "Mounted on" > header_mounted_exp || framework_failure
+echo "File" > header_file_exp || framework_failure
+
+fail=0
+
+df --portability "$FILE" > df_out || fail=1
+df --portability --direct "$FILE" > df_direct_out || fail=1
+df --portability --direct --local "$FILE" > /dev/null 2>&1 && fail=1
+
+# check df header
+$AWK '{ if (NR==1) print $6 " " $7; }' df_out > header_mounted_out \
+  || framework_failure
+$AWK '{ if (NR==1) print $6; }' df_direct_out > header_file_out \
+  || framework_failure
+compare header_mounted_out header_mounted_exp || fail=1
+compare header_file_out header_file_exp || fail=1
+
+# check df output (without --direct)
+$AWK '{ if (NR==2) print $6; }' df_out > file_out \
+  || framework_failure
+compare file_out file_exp && fail=1
+
+# check df output (with --direct)
+$AWK '{ if (NR==2) print $6; }' df_direct_out > file_out \
+  || framework_failure
+compare file_out file_exp || fail=1
+
+Exit $fail
--
2.31.1
